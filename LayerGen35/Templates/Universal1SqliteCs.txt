        /// <summary>
        /// Executes a Sql query that does not return any results.
        /// </summary>
        /// <param name="sql">The sql query to execute.</param>
        /// <param name="sqlParams">Optional <see cref="System.String.Format"/> like parameters</param>
        /// <returns></returns>
        internal static int ExecuteNonQueryFromSqlStatement(string sql, params object[] sqlParams)
        {
            int paramNdx = 0;
            int valNdx = 1;
            var paramValDictionary = new Dictionary<string, string>();

            foreach (object param in sqlParams)
            {
                if (param is string)
                {
                    sql = sql.Replace("'{" + paramNdx + "}'", "@val" + valNdx);
                    sql = sql.Replace("{" + paramNdx + "}", "@val" + valNdx);
                    paramValDictionary.Add("@val" + valNdx, (string)param);
                    valNdx++;
                }
                else
                {
                    sql = sql.Replace("{" + paramNdx + "}", param.ToString());
                }
                paramNdx++;
            }

            using (var connection = new SQLiteConnection())
            {
                connection.ConnectionString = GetConnectionString();
                using (var command = new SQLiteCommand())
                {
                    command.Connection = connection;
                    command.CommandType = CommandType.Text;
                    command.CommandText = sql;
                    foreach (KeyValuePair<string, string> kvp in paramValDictionary)
                    {
                        command.Parameters.AddWithValue(kvp.Key, kvp.Value);
                    }

                    connection.Open();
                    return command.ExecuteNonQuery();
                }
            }
        }

        /// <summary>
        /// Retrieves rows from a SqlLite Database based on a query
        /// </summary>
        /// <param name="sql">The Sql query to execute</param>
        /// <param name="sqlParams">Optional <see cref="System.String.Format"/> like parameters</param>
        /// <returns>A <see cref="System.Data.DataTable" /> with all the data.</returns>
        internal static DataTable GetDataFromSqlStatement(string sql, params object[] sqlParams)
        {
            int paramNdx = 0;
            int valNdx = 1;
            var paramValDictionary = new Dictionary<string, string>();

            foreach (object param in sqlParams)
            {
                if (param is string)
                {
                    sql = sql.Replace("'{" + paramNdx + "}'", "@val" + valNdx);
                    sql = sql.Replace("{" + paramNdx + "}", "@val" + valNdx);
                    paramValDictionary.Add("@val" + valNdx, (string)param);
                    valNdx++;
                }
                else
                {
                    sql = sql.Replace("{" + paramNdx + "}", param.ToString());
                }
                paramNdx++;
            }

            using (var connection = new SQLiteConnection())
            {
                connection.ConnectionString = GetConnectionString();
                using (var command = new SQLiteCommand())
                {
                    command.Connection = connection;
                    command.CommandType = CommandType.Text;
                    command.CommandText = sql;
                    foreach (KeyValuePair<string, string> kvp in paramValDictionary)
                    {
                        command.Parameters.AddWithValue(kvp.Key, kvp.Value);
                    }

                    connection.Open();
                    using (var adapter = new SQLiteDataAdapter())
                    {
                        using (var ds = new DataSet())
                        {
                            adapter.SelectCommand = command;
                            adapter.Fill(ds);

                            if (ds.Tables.Count > 0)
                            {
                                return ds.Tables[0];
                            }
                        }
                    }
                }
            }
            return null;
        }

		{async}

        /// <summary>
        /// Executes a Sql query that does not return any results.
        /// </summary>
        /// <param name="sql">The sql query to execute.</param>
        /// <param name="sqlParams">Optional <see cref="System.String.Format"/> like parameters</param>
        /// <returns></returns>
        internal static async System.Threading.Tasks.Task<int> ExecuteNonQueryFromSqlStatementAsync(string sql, params object[] sqlParams)
        {
            int paramNdx = 0;
            int valNdx = 1;
            var paramValDictionary = new Dictionary<string, string>();

            foreach (object param in sqlParams)
            {
                if (param is string)
                {
                    sql = sql.Replace("'{" + paramNdx + "}'", "@val" + valNdx);
                    sql = sql.Replace("{" + paramNdx + "}", "@val" + valNdx);
                    paramValDictionary.Add("@val" + valNdx, (string)param);
                    valNdx++;
                }
                else
                {
                    sql = sql.Replace("{" + paramNdx + "}", param.ToString());
                }
                paramNdx++;
            }

            using (var connection = new SQLiteConnection())
            {
                connection.ConnectionString = GetConnectionString();
                using (var command = new SQLiteCommand())
                {
                    command.Connection = connection;
                    command.CommandType = CommandType.Text;
                    command.CommandText = sql;
                    foreach (KeyValuePair<string, string> kvp in paramValDictionary)
                    {
                        command.Parameters.AddWithValue(kvp.Key, kvp.Value);
                    }

                    await connection.OpenAsync();
                    return await command.ExecuteNonQueryAsync();
                }
            }
        }

        /// <summary>
        /// Executes a Sql query that does not return any results.
        /// </summary>
        /// <param name="cancellationToken">The cancellation Token</param>
        /// <param name="sql">The sql query to execute.</param>
        /// <param name="sqlParams">Optional <see cref="System.String.Format"/> like parameters</param>
        /// <returns></returns>
        internal static async System.Threading.Tasks.Task<int> ExecuteNonQueryFromSqlStatementAsync(System.Threading.CancellationToken cancellationToken, string sql, params object[] sqlParams)
        {
            int paramNdx = 0;
            int valNdx = 1;
            var paramValDictionary = new Dictionary<string, string>();

            foreach (object param in sqlParams)
            {
                if (param is string)
                {
                    sql = sql.Replace("'{" + paramNdx + "}'", "@val" + valNdx);
                    sql = sql.Replace("{" + paramNdx + "}", "@val" + valNdx);
                    paramValDictionary.Add("@val" + valNdx, (string)param);
                    valNdx++;
                }
                else
                {
                    sql = sql.Replace("{" + paramNdx + "}", param.ToString());
                }
                paramNdx++;
            }

            using (var connection = new SQLiteConnection())
            {
                connection.ConnectionString = GetConnectionString();
                using (var command = new SQLiteCommand())
                {
                    command.Connection = connection;
                    command.CommandType = CommandType.Text;
                    command.CommandText = sql;
                    foreach (KeyValuePair<string, string> kvp in paramValDictionary)
                    {
                        command.Parameters.AddWithValue(kvp.Key, kvp.Value);
                    }

                    await connection.OpenAsync(cancellationToken);
                    return await command.ExecuteNonQueryAsync(cancellationToken);
                }
            }
        }


        /// <summary>
        /// Retrieves rows from a SqlLite Database based on a query
        /// </summary>
        /// <param name="sql">The Sql query to execute</param>
        /// <param name="sqlParams">Optional <see cref="System.String.Format"/> like parameters</param>
        /// <returns>A <see cref="System.Data.DataTable" /> with all the data.</returns>
        internal static async System.Threading.Tasks.Task<DataTable> GetDataFromSqlStatementAsync(string sql, params object[] sqlParams)
        {
            int paramNdx = 0;
            int valNdx = 1;
            var paramValDictionary = new Dictionary<string, string>();

            foreach (object param in sqlParams)
            {
                if (param is string)
                {
                    sql = sql.Replace("'{" + paramNdx + "}'", "@val" + valNdx);
                    sql = sql.Replace("{" + paramNdx + "}", "@val" + valNdx);
                    paramValDictionary.Add("@val" + valNdx, (string)param);
                    valNdx++;
                }
                else
                {
                    sql = sql.Replace("{" + paramNdx + "}", param.ToString());
                }
                paramNdx++;
            }

            using (var connection = new SQLiteConnection())
            {
                connection.ConnectionString = GetConnectionString();
                using (var command = new SQLiteCommand())
                {
                    command.Connection = connection;
                    command.CommandType = CommandType.Text;
                    command.CommandText = sql;
                    foreach (KeyValuePair<string, string> kvp in paramValDictionary)
                    {
                        command.Parameters.AddWithValue(kvp.Key, kvp.Value);
                    }

                    await connection.OpenAsync();
                    using (var adapter = new SQLiteDataAdapter())
                    {
                        using (var ds = new DataSet())
                        {
                            adapter.SelectCommand = command;
                            await System.Threading.Tasks.Task.Run(() => adapter.Fill(ds));

                            if (ds.Tables.Count > 0)
                            {
                                return ds.Tables[0];
                            }
                        }
                    }
                }
            }
            return null;
        }

        /// <summary>
        /// Retrieves rows from a SqlLite Database based on a query
        /// </summary>
        /// <param name="cancellationToken">The cancellation Token</param>
        /// <param name="sql">The Sql query to execute</param>
        /// <param name="sqlParams">Optional <see cref="System.String.Format"/> like parameters</param>
        /// <returns>A <see cref="System.Data.DataTable" /> with all the data.</returns>
        internal static async System.Threading.Tasks.Task<DataTable> GetDataFromSqlStatementAsync(System.Threading.CancellationToken cancellationToken, string sql, params object[] sqlParams)
        {
            int paramNdx = 0;
            int valNdx = 1;
            var paramValDictionary = new Dictionary<string, string>();

            foreach (object param in sqlParams)
            {
                if (param is string)
                {
                    sql = sql.Replace("'{" + paramNdx + "}'", "@val" + valNdx);
                    sql = sql.Replace("{" + paramNdx + "}", "@val" + valNdx);
                    paramValDictionary.Add("@val" + valNdx, (string)param);
                    valNdx++;
                }
                else
                {
                    sql = sql.Replace("{" + paramNdx + "}", param.ToString());
                }
                paramNdx++;
            }

            using (var connection = new SQLiteConnection())
            {
                connection.ConnectionString = GetConnectionString();
                using (var command = new SQLiteCommand())
                {
                    command.Connection = connection;
                    command.CommandType = CommandType.Text;
                    command.CommandText = sql;
                    foreach (KeyValuePair<string, string> kvp in paramValDictionary)
                    {
                        command.Parameters.AddWithValue(kvp.Key, kvp.Value);
                    }

                    await connection.OpenAsync(cancellationToken);
                    using (var adapter = new SQLiteDataAdapter())
                    {
                        using (var ds = new DataSet())
                        {
                            adapter.SelectCommand = command;
                            await System.Threading.Tasks.Task.Run(() => adapter.Fill(ds), cancellationToken);

                            if (ds.Tables.Count > 0)
                            {
                                return ds.Tables[0];
                            }
                        }
                    }
                }
            }
            return null;
        }

{/async}
